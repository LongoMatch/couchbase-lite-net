# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline builds the UWP project, runs unit tests.
name: CBL UWP PR Validation

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - master
      - 'release/*'
  pull_request:
    branches:
      - '**'
    
jobs:

  build:

    strategy:
      fail-fast: false
      matrix:
      #[x86, x64] Let's do x64 only
        targetplatform: [x64]

    runs-on: windows-latest
    
    env:
      SigningCertificate_Path: src\Couchbase.Lite.Tests.UWP\Couchbase.Lite.Tests.UWP_TemporaryKey.pfx
      Solution_Path: src\Couchbase.Lite.Tests.UWP\Couchbase.Lite.Tests.UWP.sln
      Test_Project_Path: src\Couchbase.Lite.Tests.UWP\Couchbase.Lite.Tests.UWP.Coverage.csproj
      Test_Exe_Path: src\Couchbase.Lite.Tests.UWP\bin\x64\Debug\Couchbase.Lite.Tests.UWP.Coverage.build.appxrecipe #AppxPackages\Couchbase.Lite.Tests.UWP.Coverage_1.0.0.0_x64_Debug_Test\Couchbase.Lite.Tests.UWP.Coverage_1.0.0.0_x64_Debug.appx
      Cbl_Project_Path: src\Couchbase.Lite\Couchbase.Lite.csproj
      UwpSupport_Project_Directory: src\Couchbase.Lite.Support.UWP\Couchbase.Lite.Support.UWP.csproj

#### BUILD and TEST

    steps:
    
    - uses: actions/checkout@v1
    - name: Build LiteCore
      run: pwsh -command ".\$GITHUB_WORKSPACE\uwp_build_test.ps1"
    
    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    # Restore CBL Net
    - name: Restore CBL Net
      run:  msbuild $env:Cbl_Project_Path /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: Debug
        
    # Build CBL Net
    - name: Build CBL Net
      run:  msbuild $env:Cbl_Project_Path /p:JUST_CSHARP=1 /p:Configuration=$env:Configuration
      env:
        Configuration: Debug
        
    # Restore UWP test project
    - name: Restore packages
      run: msbuild $env:Test_Project_Path -t:restore
      
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        [IO.File]::WriteAllBytes("$env:SigningCertificate_Path", $pfx_cert_byte)

    # Build the solution
    - name: Debug Build UWP app
      run: msbuild $env:Test_Project_Path /p:Configuration=Debug /p:AppxBundlePlatforms="x64" /p:AppxPackageDir=".\AppxPackages" /p:AppxBundle=Never /p:UapAppxPackageBuildMode=SideloadOnly /p:PackageCertificateKeyFile=$env:SigningCertificate_Path
        
    
    #- name: Build Projects
    #  run: msbuild $env:Solution_Path /p:Configuration=$env:Configuration /p:Platform=$env:Platform /t:Rebuild
    #  env:
    #    Configuration: Debug
    #    Platform: ${{ matrix.targetplatform }}


    # Locate vstest.console.exe and add to PATH
    - name: Setup VSTest path
      uses: darenm/Setup-VSTest@v1
      
    # Run VSTest       
    - name: VSTest
      run: vstest.console.exe /InIsolation /Platform:x64 $env:Test_Exe_Path

    # Remove pfx
    - name: Remove the .pfx
      run: Remove-Item -path $env:SigningCertificate_Path
      
